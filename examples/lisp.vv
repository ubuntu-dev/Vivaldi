// The world's worst Lisp interpreter. Sample program; stick it in a file and
// run it via 'vivaldi lisp.vv my_file' to run it:
//
//   (def reverse (fn (orig new)
//                 (if (nullp orig) new
//                     (reverse (cdr orig) (cons (car orig) new)))))
//   (prn (reverse (quote (1 2 3 4 5)) nil))

// Classes {{{

class ConsCell
  let init(car, cdr) = do
    @car = car
    @cdr = cdr
  end

  let car() = @car
  let cdr() = @cdr

  let set_car(car) = @car = car
  let set_cdr(cdr) = @cdr = cdr

  let length() = do
    let len = 0
    let c = self
    while (c): do
      len = len + 1
      c = c.cdr()
    end
    len
  end
end

class Lambda
  let init(args, body) = do
    @args = args
    @body = body
  end

  let eval(args, env) = do
    let nenv = Dictionary.new(env)
    if args.length() != @args.length():
      throw RangeError.new("wrong number of arguments")

    let argnames = @args
    while argnames: do
      nenv[argnames.car()] = args.car()
      argnames = argnames.cdr()
      args = args.cdr()
    end
    eval(@body, nenv)
  end
end

// }}}
// Parsing {{{

let tokenize(str) = str.replace(`([\(\)])`, " $1 ").split(" ") ->
                    filter(fn (x): x.size() != 0)

let parse_atom(x) = cond
  x == "nil":                                   nil,
  x.ord() >= "0".ord() && x.ord() <= "9".ord(): x.to_int(),
  true:                                         x.to_sym()

let parse(tokens) = do
  if tokens.at_end(): throw Exception.new("premature end of file")

  let token = tokens.get()
  tokens.increment()

  if token == "(": do
    let list = ConsCell.new(nil, nil)
    let cur = list
    while tokens.get() != ")": do
      cur.set_cdr(ConsCell.new(parse(tokens), nil))
      cur = cur.cdr()
    end
    tokens.increment() // ')'
    return list.cdr()
  end

  if token == ")":
    throw Exception.new("unexpected ')'")

  parse_atom(token)
end

// }}}
// Printing {{{

let print_inner_cons_cell(x) = do
  if (x.type() != ConsCell): do
    print_lisp_obj(x)
    return nil
  end

  print_lisp_obj(x.car())

  if (x.cdr() == nil): do
    print(")")
    return nil
  end
  if (x.cdr().type() != ConsCell): do
    print(" . ")
    print_lisp_obj(x.cdr())
    print(")")
    return nil
  end
  print(" ")
  print_inner_cons_cell(x.cdr())
end

let print_lisp_obj(x) = do
  if x.type() == ConsCell: do
    print("(")
    print_inner_cons_cell(x)
    return nil
  end
  cond
    x.type() == Symbol: print(String.new(x)),
    x.type() == Lambda: print("<lambda>"),
    true:               print(x)
end

let puts_lisp_obj(x) = do
  print_lisp_obj(x)
  puts("")
end

// }}}
// Evaluation {{{

let ev1(args, env) = eval(args.car(), env)
let ev2(args, env) = eval(args.cdr().car(), env)

let argmap(arglist, env) = cond
  !arglist: nil,
  true:     ConsCell.new(eval(arglist.car(), env), argmap(arglist.cdr(), env))

let eval(expr, env) = do
  if expr.type() == Symbol: return env[expr]
  if expr.type() != ConsCell: return expr

  let x = expr.car()
  let args = expr.cdr()

  cond
    x == 'quote:   args.car(),
    x == 'car:     ev1(args, env).car(),
    x == 'cdr:     ev1(args, env).cdr(),
    x == 'cons:    ConsCell.new(ev1(args, env), ev2(args, env)),
    x == 'nullp:   ev1(args, env) == nil,
    x == 'eqp:     ev1(args, env) == ev2(args, env),
    x == 'length:  ev1(args, env).length(),
    x == 'not:     !ev1(args, env),
    x == 'plus:    ev1(args, env) + ev2(args, env),
    x == 'minus:   ev1(args, env) - ev2(args, env),
    x == 'times:   ev1(args, env) * ev2(args, env),
    x == 'divides: ev1(args, env) / ev2(args, env),
    x == 'def:     env[args.car()] = ev2(args, env),
    x == 'if:      eval((cond ev1(args, env): args.cdr().car(),
                         true:                args.cdr().cdr().car()),
                        env),
    x == 'fn:      Lambda.new(args.car(), args.cdr().car()),
    x == 'prn:     puts_lisp_obj(ev1(args, env)),
    true:          eval(x, env).eval(argmap(args, env), env)
end

// }}}
// Running files {{{

if argv.size() != 1:
  throw Exception.new("expected one file as command-line argument")
let file = File.new(argv[0])
let exprs = []
let raw = ""
for line in file: raw = raw + " " + line

let tokens = tokenize(raw)
let iter = tokens.start()
while !iter.at_end(): exprs.append(parse(iter))

let env = {}
for i in exprs: eval(i, env)

// }}}
