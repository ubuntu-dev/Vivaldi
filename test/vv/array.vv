require "assert"

let arr_size() = do
  assert([].size() == 0, "[].size() == 0")
  assert([1].size() == 1, "[1].size() == 1")
  assert([1, 2].size() == 2, "[1, 2].size() == 2")
end

let arr = [1, 2, 3, 4, 5, 6]

let arr_pop() = do
  assert(arr.pop() == 6, "arr.pop() == 6")
  assert(arr.size() == 5, "arr.size() == 5")
  let sentinel = false
  try: [].pop()
  catch RangeError _: sentinel = true
  assert(sentinel, "popping from empty Array")
end

let arr_order() = do
  for i in 0 to 5: do
    let str = String.new(i)
    assert(arr[i] == i + 1, "arr[" + str + "] == " + str + " + 1")
  end
end

let arr_indexing() = do
  arr[2] = 'foo
  assert(arr[2] == 'foo, "arr[2] == 'foo")
end

let arr_addition() = do
  let combined = arr + [6, 7, 8]
  assert(combined.size() == 8, "combined.size() == 8")
  assert(combined[6] == 7, "combined[6] == 7")
end

let arr_comp() = do
  let arr = [1, 2, 3, "foo"]
  let same = [1, 2, 3, "foo"]
  assert(arr == arr, "arr == arr")
  assert(arr == same, "arr == same")
  assert(!(arr != arr), "!(arr != arr)")
  assert(!(arr != same), "!(arr != same)")

  assert(arr != 5, "arr != 5")

  let different = ["foo", 56]
  assert(!(arr == different), "!(arr == different)")
  assert(arr != different, "arr != different")

  class Foo
    let equals(x) = true
  end
  class Bar
    let equals(x) = false
  end

  assert([Foo.new(), 56] == [Foo.new(), 56], "[Foo.new(), 56] == [Foo.new(), 56]")
  assert([Bar.new(), 56] != [Bar.new(), 56], "[Bar.new(), 56] != [Bar.new(), 56]")
end

let arr_iter() = do
  let arr = [1, 2, 4, 8, 16]
  assert(arr.start().get() == 1, "reading from iterator")
  assert(arr.start() == arr.start(), "arr.start() == arr.start()")
  assert(arr.stop() != arr.start(), "arr.stop() != arr.start()")
  assert(arr.start() < arr.stop(), "arr.start() < arr.stop()")
  let other = []
  for i in arr.start() to arr.stop(): other.append(i)
  for i in 0 to 5: assert(arr[i] == other[i].get(), "member of range of iterators")
end

section("Arrays")
test(arr_size, "size")
test(arr_pop, "pop")
test(arr_order, "order")
test(arr_indexing, "indexing")
test(arr_addition, "addition")
test(arr_comp, "comparison")
test(arr_iter, "iterators")
