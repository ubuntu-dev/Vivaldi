require "assert"

let test_regex_creation() = do
  let val = `foo.*bar`
  `foo(bar)`

  let excepted = false
  try: `foo(`
  catch Exception e: excepted = true
  assert(excepted, "Excepting on invalid regex literal")
end

let test_match_index() = do
  let re = `foo.*bar`
  let str = "this sentence contains foobazbar"
  assert(re.match_index(str) == 23, "re.match_index(str) == 23")

  assert(re.match_index("foobar") == 0, "re.match_index(\"foobar\") == 0")
  assert(re.match_index("nope") == nil, "re.match_index(\"nope\") == nil")
end

let test_regex_result() = do
  let excepted = false
  try: RegexResult.new()
  catch Exception _: excepted = true
  assert(excepted, "nonconstructability in RegexResult")
end

let test_match() = do
  let re = `(foobar).*(foo[a-z]*bar)`
  let str = "foobar, foobazbar"
  let match = re.match(str)
  assert(match.size() == 3, "match.size() == 3")
  assert(match[0] == "foobar, foobazbar", "match[0] == \"foobar, foobazbar\"")
  assert(match[1] == "foobar", "match[1] == \"foobar\"")
  assert(match[2] == "foobazbar", "match[1] == \"foobazbar\"")
  assert(match.index(0) == 0, "match.index(0) == 0")
  assert(match.index(1) == 0, "match.index(1) == 0")
  assert(match.index(2) == 8, "match.index(1) == 8")
end

let test_replace() = do
  let str = "foobazbar"
  let rep = str.replace(`foo(.*)bar`, "[$1]")
  assert(rep == "[baz]", "rep == \"[baz]\"")
end

section("Regexes")
test(test_regex_creation, "literals and validation")
test(test_match_index, "match_index")
test(test_match, "match")
test(test_regex_result, "RegexResult")
test(test_replace, "String replace")
