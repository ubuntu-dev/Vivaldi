require "assert"

let test_filter() = do
  let filtered = filter(1 to 10, fn (x): x % 2 != 0)
  assert(filtered.size() == 5, "filtered.size() == 5")
  assert(filtered[0] == 1, "filtered[0] == 1")
  assert(filtered[1] == 3, "filtered[1] == 3")
  assert(filtered[2] == 5, "filtered[2] == 5")
  assert(filtered[3] == 7, "filtered[3] == 7")
  assert(filtered[4] == 9, "filtered[4] == 9")
end

let test_map() = do
  let orig = [1, 2, 3]
  let mapped = map(orig, fn (x): x * 2)
  assert(mapped.size() == 3, "mapped.size() == 3")
  assert(mapped[0] == 2, "mapped[0] == 2")
  assert(mapped[1] == 4, "mapped[1] == 4")
  assert(mapped[2] == 6, "mapped[2] == 6")
end

let test_counting() = do
  let counted = count(1 to 10, fn (x): x % 2 != 0)
  assert(counted == 5, "count(1 to 10, fn (x): x % 2 != 0) == 5")
  let any_check = any(1 to 10, fn (x): x % 2 != 0)
  assert(any_check, "any(1 to 10, fn (x): x % 2 != 0")
  let all_check = all(1 to 10, fn (x): x % 2 != 0)
  assert(!all_check, "!all(1 to 10, fn (x): x % 2 != 0")
end

let test_reduce() = do
  let str = "foo"
  let same = reduce(str, "", fn (t, i): t + i)
  assert(str == same, "reduce(\"foo\", \"\", fn (t, i): t + i) == \"foo\"")
  let spacified = reduce(str, "", fn (t, i): t + " " + i)
  assert(spacified == " f o o",
         "reduce(\"foo\", \"\", fn (t, i): t + \" \" i) == \" f o o\"")
  let reversed = reduce(str, "", fn (t, i): "" + i + t)
  assert(reversed == "oof",
         "reduce(\"foo\", \"\", fn (t, i): i + t) == \"oof\"")
end

let test_reverse() = do
  let rng = reverse(1 to 3)
  assert(rng.size() == 2, "reverse(1 to 3).size() == 2")
  assert(rng[0] == 2, "reverse(1 to 3)[0] == 2")
  assert(rng[1] == 1, "reverse(1 to 3)[1] == 1")

  let str = reverse("foo")
  assert(str.size() == 3, "reverse(\"foo\").size() == 3")
  assert(str[0] == \o, "reverse(\"foo\")[0] == \\o")
  assert(str[1] == \o, "reverse(\"foo\")[1] == \\o")
  assert(str[2] == \f, "reverse(\"foo\")[2] == \\f")

  let arr = reverse(['foo, 'bar, 'baz])
  assert(arr.size() == 3, "reverse(['foo, 'bar, 'baz]).size() == 3")
  assert(arr[0] == 'baz, "reverse(['foo, 'bar, 'baz])[0] == 'baz")
  assert(arr[1] == 'bar, "reverse(['foo, 'bar, 'baz])[1] == 'bar")
  assert(arr[2] == 'foo, "reverse(['foo, 'bar, 'baz])[2] == 'foo")

  assert(reverse([]).size() == 0, "reverse([]).size() == 0")
  assert(reverse("").size() == 0, "reverse(\"\").size() == 0")
end

let test_sort() = do
  let unsorted = [1, 5, 4, 2, 3, 0, 1]
  let sorted = sort(unsorted)
  assert(sorted == [0, 1, 1, 2, 3, 4, 5], "sorted == [0, 1, 1, 2, 3, 4, 5]")
  let sort_rng = sort(1 to 5)
  assert(sort_rng == [1, 2, 3, 4], "sort_rng == [1, 2, 3, 4]")

  let sort_empty = sort([])
  assert(sort_empty == [], "sort([]) == []")

  class Sortable
    let init(x) = @x = x
    let less(other) = @x > other.x()
    let x() = @x
  end

  let arr = map(1 to 5, fn (i): Sortable.new(i))
  let sorted_arr = sort(arr)
  let deboxed = map(sorted_arr, fn (i): i.x())

  assert(deboxed.size() == 4, "deboxed.size() == 4")
  assert(deboxed[0] == 4, "deboxed[0] == 4")
  assert(deboxed[1] == 3, "deboxed[1] == 3")
  assert(deboxed[2] == 2, "deboxed[2] == 2")
  assert(deboxed[3] == 1, "deboxed[3] == 1")
end

section("Standalone Functions")

test(test_filter, "filter")
test(test_map, "map")
test(test_counting, "count, any, all")
test(test_reduce, "reduce")
test(test_reverse, "reverse")
test(test_sort, "sort")
