require "assert"

class Base
  let set_a(a) = @a = a
  let get_i() = @i
end

class Derived : Base
  let init(a, b) = do
    @i = a + b
  end

  let get_a() = @a
end

let obj = Derived.new(1, 2)

let type_system() = do
  assert(obj.type() == Derived,       "obj.type() == Derived")
  assert(obj.type().parent() == Base, "obj.type().parent() == Base")
  assert(obj.get_i() == 3,            "obj.get_i() == 3")
  obj.set_a('foo)
  assert(obj.get_a() == 'foo,         "obj.get_a() == 'foo")
end

let instantiation() = do
  class Uninstantiable
    let init() = throw nil
  end

  let instantiated = true
  let i = nil
  try: Uninstantiable.new()
  catch Exception e: instantiated = false
  assert(!instantiated && i == nil, "returned object from exception in init")
end

let self_wrapping() = do
  class SelfWrapper
    let init() = @a = 5
    let get_a() = @a
    let self_a_getter() = fn (): self.get_a()
  end

  let apply(f) = f()
  let obj = SelfWrapper.new()
  let five = apply(obj.self_a_getter())
  assert(five == 5, "capturing self in lambdas")
end

let non_object_classes() = do
  let f = "foo"
  assert(!f.has_member('bar), "!f.member('bar)")

  let excepted = false
  try: f.member('bar)
  catch Exception e: excepted = true
  assert(excepted, "except on accessing nonexistent member variable")

  f.set_member('bar, 120)
  assert(f.member('bar) == 120, "f.member('bar) == 120")
  assert(f.has_member('bar), "f.member('bar)")
  assert(!"foo".has_member('bar), "!\"foo\".has_member('bar)")
end

section("Types")
test(type_system, "basic")
test(instantiation, "excepting from initializer")
test(self_wrapping, "capturing self in closures")
test(non_object_classes, "getting and setting members in non-Objects")
