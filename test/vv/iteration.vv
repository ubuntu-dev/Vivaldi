require "assert"

class Decrementer
  let init(x) = @x = x

  let start() = self
  let get() = @x
  let at_end() = @x == 0
  let increment() = do
    @x = @x - 1
    self
  end
end

class Inverted
  let init(x) = @x = x

  let greater(y) =
    try:
      throw Exception.new("hello")
    catch Exception e:
      @x < y.get_x()

  let add(x) = Inverted.new(@x - x)

  let get_x() = @x
end

let for_loop() = do
  let arr = []
  for i in Decrementer.new(5): arr.append(i)
  assert(arr[0] == 5, "arr[0] == 5")
  assert(arr[1] == 4, "arr[1] == 4")
  assert(arr[2] == 3, "arr[2] == 3")
  assert(arr[3] == 2, "arr[3] == 2")
  assert(arr[4] == 1, "arr[4] == 1")
end

let range_test() = do
  let inv_arr = []
  try:
    for i in Inverted.new(10) to Inverted.new(5): inv_arr.append(i.get_x())
  catch Exception e:
    assert(false, "failed to catch exception inside of Range")

  assert(inv_arr == [10, 9, 8, 7, 6], "inv_arr == [10, 9, 8, 7, 6]")
end

let range_persistence_test() = do
  let r = 1 to 100
  for i in r: i
  assert(r.size() == 99, "(1 to 100).size() == 99")
end

let subclass_iteration() = do
  class StupidRange : Range
    let at_end() = self.get() >= 12
  end
  let to_5 = reduce(1 to 5, 0, fn (a, b): a + b)
  let to_12 = reduce(StupidRange.new(1, 5), 0, fn (a, b): a + b)
  assert(to_5 == 10, "to_5 == 10")
  assert(to_12 == 66, "to_12 == 66")
end

section("Iteration")
test(for_loop, "custom type in for loop")
test(range_test, "custom type in Range")
test(range_persistence_test, "reusing Range")
test(subclass_iteration, "overriding Range methods in subclass")
