require "assert"

let size() = do
  assert("".size() == 0, "\"\".size() == 0")
  assert(" ".size() == 1, "\" \".size() == 1")
  assert("foo".size() == 3, "\"foo\".size() == 2")
end

let str = "foo"

let indexing() = do
  assert(str[0] == \f, "str[0] == \f");
  assert(str[2] == \o, "str[2] == \o");

  let excepted = false
  try: str[128]
  catch Exception e: excepted = true
  assert(excepted, "string accepted index past end")
end

let other = str + "bar"

let addition() = do
  assert(str == "foo", "assignment mutated original")
  assert(other == "foobar", "assignment didn't concatenate")
end

let starts_with() = do
  assert(other.starts_with(str), "'foobar'.starts_with('foo')")
  assert(!str.starts_with(other), "!'foo'.starts_with('foobar')")
  assert(!other.starts_with("wat"), "!'foobar'.starts_with('wat')")
end

let case() = do
  let upper = "FOO"
  assert(str.to_upper() == upper, "'foo'.to_upper() == 'FOO'")
  assert(upper.to_lower() == str, "'FOO'.to_lower() == 'foo'")
end

let ord() = do
  let ascii = "\0\1\2\3\4\5\6\7\10\11\n\v\f\r\16\17\20\21\22\23\24\25\26\27"   +
              "\30\31\32\33\34\35\36\37 !\"#$%&'()*+,-./0123456789:;<=>?@ABCD" +
              "EFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~\177"
  assert(ascii.size() == 128, "ascii.size() == 128")
  for i in 0 to ascii.size():
    assert(ascii[i].ord() == i,
           "incorrect ord for ASCII character " + new String(i))
end

let comparison() = do
  assert("foo" < "foobar", "\"foo\" < \"foobar\"")
  assert("foobar" > "foo", "\"foobar\" > \"foo\"")
  assert("foo" <= "foo", "\"foo\" <= \"foo\"")
  assert("abcde" >= "ABCDE", "\"abcde\" <= \"ABCDE\"")
end

let conversion() = do
  let one = "1"
  let one_point_five = "1.5"
  assert(one.to_int() == 1, "\"1\".to_int() == 1")
  assert(one_point_five.to_int() == 1, "\"1.5\".to_int() == 1")
  assert(one.to_flt() == 1.0, "\"1\".to_flt() == 1.0")
  assert(one_point_five.to_flt() == 1.5, "\"1.5\".to_flt() == 1.5")

  assert("foo".to_sym() == 'foo, "\"foo\".to_sym() == 'foo")
end

section("Strings")
test(size, "size")
test(indexing, "indexing")
test(addition, "addition")
test(starts_with, "starts_with")
test(case, "case-changing")
test(ord, "ASCII ord and escaping")
test(comparison, "comparison")
test(conversion, "to_int, to_flt, and to_sym")
